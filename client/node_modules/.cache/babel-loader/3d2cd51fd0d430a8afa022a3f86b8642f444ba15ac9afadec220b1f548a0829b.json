{"ast":null,"code":"function identity(x) {\n  return x;\n}\n\n/** @internal */\nfunction pipeFromArray(fns) {\n  if (fns.length === 0) {\n    return identity;\n  }\n  if (fns.length === 1) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return fns[0];\n  }\n  return function piped(input) {\n    return fns.reduce((prev, fn) => fn(prev), input);\n  };\n}\nfunction isObservable(x) {\n  return typeof x === 'object' && x !== null && 'subscribe' in x;\n}\nfunction observable(subscribe) {\n  const self = {\n    subscribe(observer) {\n      let teardownRef = null;\n      let isDone = false;\n      let unsubscribed = false;\n      let teardownImmediately = false;\n      function unsubscribe() {\n        if (teardownRef === null) {\n          teardownImmediately = true;\n          return;\n        }\n        if (unsubscribed) {\n          return;\n        }\n        unsubscribed = true;\n        if (typeof teardownRef === 'function') {\n          teardownRef();\n        } else if (teardownRef) {\n          teardownRef.unsubscribe();\n        }\n      }\n      teardownRef = subscribe({\n        next(value) {\n          if (isDone) {\n            return;\n          }\n          observer.next?.(value);\n        },\n        error(err) {\n          if (isDone) {\n            return;\n          }\n          isDone = true;\n          observer.error?.(err);\n          unsubscribe();\n        },\n        complete() {\n          if (isDone) {\n            return;\n          }\n          isDone = true;\n          observer.complete?.();\n          unsubscribe();\n        }\n      });\n      if (teardownImmediately) {\n        unsubscribe();\n      }\n      return {\n        unsubscribe\n      };\n    },\n    pipe(...operations) {\n      return pipeFromArray(operations)(self);\n    }\n  };\n  return self;\n}\nexport { isObservable as i, observable as o };","map":{"version":3,"names":["identity","x","pipeFromArray","fns","length","piped","input","reduce","prev","fn","isObservable","observable","subscribe","self","observer","teardownRef","isDone","unsubscribed","teardownImmediately","unsubscribe","next","value","error","err","complete","pipe","operations","i","o"],"sources":["/Users/danilakiva/jspool/s21_arcade_games/node_modules/@trpc/server/dist/observable-ade1bad8.mjs"],"sourcesContent":["function identity(x) {\n    return x;\n}\n\n/** @internal */ function pipeFromArray(fns) {\n    if (fns.length === 0) {\n        return identity;\n    }\n    if (fns.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce((prev, fn)=>fn(prev), input);\n    };\n}\n\nfunction isObservable(x) {\n    return typeof x === 'object' && x !== null && 'subscribe' in x;\n}\nfunction observable(subscribe) {\n    const self = {\n        subscribe (observer) {\n            let teardownRef = null;\n            let isDone = false;\n            let unsubscribed = false;\n            let teardownImmediately = false;\n            function unsubscribe() {\n                if (teardownRef === null) {\n                    teardownImmediately = true;\n                    return;\n                }\n                if (unsubscribed) {\n                    return;\n                }\n                unsubscribed = true;\n                if (typeof teardownRef === 'function') {\n                    teardownRef();\n                } else if (teardownRef) {\n                    teardownRef.unsubscribe();\n                }\n            }\n            teardownRef = subscribe({\n                next (value) {\n                    if (isDone) {\n                        return;\n                    }\n                    observer.next?.(value);\n                },\n                error (err) {\n                    if (isDone) {\n                        return;\n                    }\n                    isDone = true;\n                    observer.error?.(err);\n                    unsubscribe();\n                },\n                complete () {\n                    if (isDone) {\n                        return;\n                    }\n                    isDone = true;\n                    observer.complete?.();\n                    unsubscribe();\n                }\n            });\n            if (teardownImmediately) {\n                unsubscribe();\n            }\n            return {\n                unsubscribe\n            };\n        },\n        pipe (...operations) {\n            return pipeFromArray(operations)(self);\n        }\n    };\n    return self;\n}\n\nexport { isObservable as i, observable as o };\n"],"mappings":"AAAA,SAASA,QAAQA,CAACC,CAAC,EAAE;EACjB,OAAOA,CAAC;AACZ;;AAEA;AAAiB,SAASC,aAAaA,CAACC,GAAG,EAAE;EACzC,IAAIA,GAAG,CAACC,MAAM,KAAK,CAAC,EAAE;IAClB,OAAOJ,QAAQ;EACnB;EACA,IAAIG,GAAG,CAACC,MAAM,KAAK,CAAC,EAAE;IAClB;IACA,OAAOD,GAAG,CAAC,CAAC,CAAC;EACjB;EACA,OAAO,SAASE,KAAKA,CAACC,KAAK,EAAE;IACzB,OAAOH,GAAG,CAACI,MAAM,CAAC,CAACC,IAAI,EAAEC,EAAE,KAAGA,EAAE,CAACD,IAAI,CAAC,EAAEF,KAAK,CAAC;EAClD,CAAC;AACL;AAEA,SAASI,YAAYA,CAACT,CAAC,EAAE;EACrB,OAAO,OAAOA,CAAC,KAAK,QAAQ,IAAIA,CAAC,KAAK,IAAI,IAAI,WAAW,IAAIA,CAAC;AAClE;AACA,SAASU,UAAUA,CAACC,SAAS,EAAE;EAC3B,MAAMC,IAAI,GAAG;IACTD,SAASA,CAAEE,QAAQ,EAAE;MACjB,IAAIC,WAAW,GAAG,IAAI;MACtB,IAAIC,MAAM,GAAG,KAAK;MAClB,IAAIC,YAAY,GAAG,KAAK;MACxB,IAAIC,mBAAmB,GAAG,KAAK;MAC/B,SAASC,WAAWA,CAAA,EAAG;QACnB,IAAIJ,WAAW,KAAK,IAAI,EAAE;UACtBG,mBAAmB,GAAG,IAAI;UAC1B;QACJ;QACA,IAAID,YAAY,EAAE;UACd;QACJ;QACAA,YAAY,GAAG,IAAI;QACnB,IAAI,OAAOF,WAAW,KAAK,UAAU,EAAE;UACnCA,WAAW,CAAC,CAAC;QACjB,CAAC,MAAM,IAAIA,WAAW,EAAE;UACpBA,WAAW,CAACI,WAAW,CAAC,CAAC;QAC7B;MACJ;MACAJ,WAAW,GAAGH,SAAS,CAAC;QACpBQ,IAAIA,CAAEC,KAAK,EAAE;UACT,IAAIL,MAAM,EAAE;YACR;UACJ;UACAF,QAAQ,CAACM,IAAI,GAAGC,KAAK,CAAC;QAC1B,CAAC;QACDC,KAAKA,CAAEC,GAAG,EAAE;UACR,IAAIP,MAAM,EAAE;YACR;UACJ;UACAA,MAAM,GAAG,IAAI;UACbF,QAAQ,CAACQ,KAAK,GAAGC,GAAG,CAAC;UACrBJ,WAAW,CAAC,CAAC;QACjB,CAAC;QACDK,QAAQA,CAAA,EAAI;UACR,IAAIR,MAAM,EAAE;YACR;UACJ;UACAA,MAAM,GAAG,IAAI;UACbF,QAAQ,CAACU,QAAQ,GAAG,CAAC;UACrBL,WAAW,CAAC,CAAC;QACjB;MACJ,CAAC,CAAC;MACF,IAAID,mBAAmB,EAAE;QACrBC,WAAW,CAAC,CAAC;MACjB;MACA,OAAO;QACHA;MACJ,CAAC;IACL,CAAC;IACDM,IAAIA,CAAE,GAAGC,UAAU,EAAE;MACjB,OAAOxB,aAAa,CAACwB,UAAU,CAAC,CAACb,IAAI,CAAC;IAC1C;EACJ,CAAC;EACD,OAAOA,IAAI;AACf;AAEA,SAASH,YAAY,IAAIiB,CAAC,EAAEhB,UAAU,IAAIiB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}