{"ast":null,"code":"import { g as getHTTPStatusCodeFromError } from './index-f91d720c.mjs';\nimport { T as TRPC_ERROR_CODES_BY_KEY } from './codes-c924c3db.mjs';\n\n/**\n * @internal\n */\nfunction getErrorShape(opts) {\n  const {\n    path,\n    error,\n    config\n  } = opts;\n  const {\n    code\n  } = opts.error;\n  const shape = {\n    message: error.message,\n    code: TRPC_ERROR_CODES_BY_KEY[code],\n    data: {\n      code,\n      httpStatus: getHTTPStatusCodeFromError(error)\n    }\n  };\n  if (config.isDev && typeof opts.error.stack === 'string') {\n    shape.data.stack = opts.error.stack;\n  }\n  if (typeof path === 'string') {\n    shape.data.path = path;\n  }\n  return config.errorFormatter({\n    ...opts,\n    shape\n  });\n}\nfunction transformTRPCResponseItem(config, item) {\n  if ('error' in item) {\n    return {\n      ...item,\n      error: config.transformer.output.serialize(item.error)\n    };\n  }\n  if ('data' in item.result) {\n    return {\n      ...item,\n      result: {\n        ...item.result,\n        data: config.transformer.output.serialize(item.result.data)\n      }\n    };\n  }\n  return item;\n}\n/**\n * Takes a unserialized `TRPCResponse` and serializes it with the router's transformers\n **/\nfunction transformTRPCResponse(config, itemOrItems) {\n  return Array.isArray(itemOrItems) ? itemOrItems.map(item => transformTRPCResponseItem(config, item)) : transformTRPCResponseItem(config, itemOrItems);\n}\nexport { getErrorShape as g, transformTRPCResponse as t };","map":{"version":3,"names":["g","getHTTPStatusCodeFromError","T","TRPC_ERROR_CODES_BY_KEY","getErrorShape","opts","path","error","config","code","shape","message","data","httpStatus","isDev","stack","errorFormatter","transformTRPCResponseItem","item","transformer","output","serialize","result","transformTRPCResponse","itemOrItems","Array","isArray","map","t"],"sources":["/Users/danilakiva/jspool/s21_arcade_games/client/node_modules/@trpc/server/dist/transformTRPCResponse-1153b421.mjs"],"sourcesContent":["import { g as getHTTPStatusCodeFromError } from './index-f91d720c.mjs';\nimport { T as TRPC_ERROR_CODES_BY_KEY } from './codes-c924c3db.mjs';\n\n/**\n * @internal\n */ function getErrorShape(opts) {\n    const { path , error , config  } = opts;\n    const { code  } = opts.error;\n    const shape = {\n        message: error.message,\n        code: TRPC_ERROR_CODES_BY_KEY[code],\n        data: {\n            code,\n            httpStatus: getHTTPStatusCodeFromError(error)\n        }\n    };\n    if (config.isDev && typeof opts.error.stack === 'string') {\n        shape.data.stack = opts.error.stack;\n    }\n    if (typeof path === 'string') {\n        shape.data.path = path;\n    }\n    return config.errorFormatter({\n        ...opts,\n        shape\n    });\n}\n\nfunction transformTRPCResponseItem(config, item) {\n    if ('error' in item) {\n        return {\n            ...item,\n            error: config.transformer.output.serialize(item.error)\n        };\n    }\n    if ('data' in item.result) {\n        return {\n            ...item,\n            result: {\n                ...item.result,\n                data: config.transformer.output.serialize(item.result.data)\n            }\n        };\n    }\n    return item;\n}\n/**\n * Takes a unserialized `TRPCResponse` and serializes it with the router's transformers\n **/ function transformTRPCResponse(config, itemOrItems) {\n    return Array.isArray(itemOrItems) ? itemOrItems.map((item)=>transformTRPCResponseItem(config, item)) : transformTRPCResponseItem(config, itemOrItems);\n}\n\nexport { getErrorShape as g, transformTRPCResponse as t };\n"],"mappings":"AAAA,SAASA,CAAC,IAAIC,0BAA0B,QAAQ,sBAAsB;AACtE,SAASC,CAAC,IAAIC,uBAAuB,QAAQ,sBAAsB;;AAEnE;AACA;AACA;AAAI,SAASC,aAAaA,CAACC,IAAI,EAAE;EAC7B,MAAM;IAAEC,IAAI;IAAGC,KAAK;IAAGC;EAAQ,CAAC,GAAGH,IAAI;EACvC,MAAM;IAAEI;EAAM,CAAC,GAAGJ,IAAI,CAACE,KAAK;EAC5B,MAAMG,KAAK,GAAG;IACVC,OAAO,EAAEJ,KAAK,CAACI,OAAO;IACtBF,IAAI,EAAEN,uBAAuB,CAACM,IAAI,CAAC;IACnCG,IAAI,EAAE;MACFH,IAAI;MACJI,UAAU,EAAEZ,0BAA0B,CAACM,KAAK;IAChD;EACJ,CAAC;EACD,IAAIC,MAAM,CAACM,KAAK,IAAI,OAAOT,IAAI,CAACE,KAAK,CAACQ,KAAK,KAAK,QAAQ,EAAE;IACtDL,KAAK,CAACE,IAAI,CAACG,KAAK,GAAGV,IAAI,CAACE,KAAK,CAACQ,KAAK;EACvC;EACA,IAAI,OAAOT,IAAI,KAAK,QAAQ,EAAE;IAC1BI,KAAK,CAACE,IAAI,CAACN,IAAI,GAAGA,IAAI;EAC1B;EACA,OAAOE,MAAM,CAACQ,cAAc,CAAC;IACzB,GAAGX,IAAI;IACPK;EACJ,CAAC,CAAC;AACN;AAEA,SAASO,yBAAyBA,CAACT,MAAM,EAAEU,IAAI,EAAE;EAC7C,IAAI,OAAO,IAAIA,IAAI,EAAE;IACjB,OAAO;MACH,GAAGA,IAAI;MACPX,KAAK,EAAEC,MAAM,CAACW,WAAW,CAACC,MAAM,CAACC,SAAS,CAACH,IAAI,CAACX,KAAK;IACzD,CAAC;EACL;EACA,IAAI,MAAM,IAAIW,IAAI,CAACI,MAAM,EAAE;IACvB,OAAO;MACH,GAAGJ,IAAI;MACPI,MAAM,EAAE;QACJ,GAAGJ,IAAI,CAACI,MAAM;QACdV,IAAI,EAAEJ,MAAM,CAACW,WAAW,CAACC,MAAM,CAACC,SAAS,CAACH,IAAI,CAACI,MAAM,CAACV,IAAI;MAC9D;IACJ,CAAC;EACL;EACA,OAAOM,IAAI;AACf;AACA;AACA;AACA;AAAK,SAASK,qBAAqBA,CAACf,MAAM,EAAEgB,WAAW,EAAE;EACrD,OAAOC,KAAK,CAACC,OAAO,CAACF,WAAW,CAAC,GAAGA,WAAW,CAACG,GAAG,CAAET,IAAI,IAAGD,yBAAyB,CAACT,MAAM,EAAEU,IAAI,CAAC,CAAC,GAAGD,yBAAyB,CAACT,MAAM,EAAEgB,WAAW,CAAC;AACzJ;AAEA,SAASpB,aAAa,IAAIJ,CAAC,EAAEuB,qBAAqB,IAAIK,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}