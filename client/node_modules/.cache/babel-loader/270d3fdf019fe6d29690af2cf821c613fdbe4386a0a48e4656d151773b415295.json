{"ast":null,"code":"function isObject(value) {\n  // check that value is object\n  return !!value && !Array.isArray(value) && typeof value === 'object';\n}\n\n// FIXME:\n// - the generics here are probably unnecessary\n// - the RPC-spec could probably be simplified to combine HTTP + WS\n/** @internal */\nfunction transformResultInner(response, runtime) {\n  if ('error' in response) {\n    const error = runtime.transformer.deserialize(response.error);\n    return {\n      ok: false,\n      error: {\n        ...response,\n        error\n      }\n    };\n  }\n  const result = {\n    ...response.result,\n    ...((!response.result.type || response.result.type === 'data') && {\n      type: 'data',\n      data: runtime.transformer.deserialize(response.result.data)\n    })\n  };\n  return {\n    ok: true,\n    result\n  };\n}\nclass TransformResultError extends Error {\n  constructor() {\n    super('Unable to transform response from server');\n  }\n}\n/**\n * Transforms and validates that the result is a valid TRPCResponse\n * @internal\n */\nfunction transformResult(response, runtime) {\n  let result;\n  try {\n    // Use the data transformers on the JSON-response\n    result = transformResultInner(response, runtime);\n  } catch (err) {\n    throw new TransformResultError();\n  }\n  // check that output of the transformers is a valid TRPCResponse\n  if (!result.ok && (!isObject(result.error.error) || typeof result.error.error.code !== 'number')) {\n    throw new TransformResultError();\n  }\n  if (result.ok && !isObject(result.result)) {\n    throw new TransformResultError();\n  }\n  return result;\n}\nexport { isObject as i, transformResult as t };","map":{"version":3,"names":["isObject","value","Array","isArray","transformResultInner","response","runtime","error","transformer","deserialize","ok","result","type","data","TransformResultError","Error","constructor","transformResult","err","code","i","t"],"sources":["/Users/danilakiva/jspool/s21_arcade_games/client/node_modules/@trpc/client/dist/transformResult-ace864b8.mjs"],"sourcesContent":["function isObject(value) {\n    // check that value is object\n    return !!value && !Array.isArray(value) && typeof value === 'object';\n}\n\n// FIXME:\n// - the generics here are probably unnecessary\n// - the RPC-spec could probably be simplified to combine HTTP + WS\n/** @internal */ function transformResultInner(response, runtime) {\n    if ('error' in response) {\n        const error = runtime.transformer.deserialize(response.error);\n        return {\n            ok: false,\n            error: {\n                ...response,\n                error\n            }\n        };\n    }\n    const result = {\n        ...response.result,\n        ...(!response.result.type || response.result.type === 'data') && {\n            type: 'data',\n            data: runtime.transformer.deserialize(response.result.data)\n        }\n    };\n    return {\n        ok: true,\n        result\n    };\n}\nclass TransformResultError extends Error {\n    constructor(){\n        super('Unable to transform response from server');\n    }\n}\n/**\n * Transforms and validates that the result is a valid TRPCResponse\n * @internal\n */ function transformResult(response, runtime) {\n    let result;\n    try {\n        // Use the data transformers on the JSON-response\n        result = transformResultInner(response, runtime);\n    } catch (err) {\n        throw new TransformResultError();\n    }\n    // check that output of the transformers is a valid TRPCResponse\n    if (!result.ok && (!isObject(result.error.error) || typeof result.error.error.code !== 'number')) {\n        throw new TransformResultError();\n    }\n    if (result.ok && !isObject(result.result)) {\n        throw new TransformResultError();\n    }\n    return result;\n}\n\nexport { isObject as i, transformResult as t };\n"],"mappings":"AAAA,SAASA,QAAQA,CAACC,KAAK,EAAE;EACrB;EACA,OAAO,CAAC,CAACA,KAAK,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,IAAI,OAAOA,KAAK,KAAK,QAAQ;AACxE;;AAEA;AACA;AACA;AACA;AAAiB,SAASG,oBAAoBA,CAACC,QAAQ,EAAEC,OAAO,EAAE;EAC9D,IAAI,OAAO,IAAID,QAAQ,EAAE;IACrB,MAAME,KAAK,GAAGD,OAAO,CAACE,WAAW,CAACC,WAAW,CAACJ,QAAQ,CAACE,KAAK,CAAC;IAC7D,OAAO;MACHG,EAAE,EAAE,KAAK;MACTH,KAAK,EAAE;QACH,GAAGF,QAAQ;QACXE;MACJ;IACJ,CAAC;EACL;EACA,MAAMI,MAAM,GAAG;IACX,GAAGN,QAAQ,CAACM,MAAM;IAClB,IAAG,CAAC,CAACN,QAAQ,CAACM,MAAM,CAACC,IAAI,IAAIP,QAAQ,CAACM,MAAM,CAACC,IAAI,KAAK,MAAM,KAAK;MAC7DA,IAAI,EAAE,MAAM;MACZC,IAAI,EAAEP,OAAO,CAACE,WAAW,CAACC,WAAW,CAACJ,QAAQ,CAACM,MAAM,CAACE,IAAI;IAC9D,CAAC;EACL,CAAC;EACD,OAAO;IACHH,EAAE,EAAE,IAAI;IACRC;EACJ,CAAC;AACL;AACA,MAAMG,oBAAoB,SAASC,KAAK,CAAC;EACrCC,WAAWA,CAAA,EAAE;IACT,KAAK,CAAC,0CAA0C,CAAC;EACrD;AACJ;AACA;AACA;AACA;AACA;AAAI,SAASC,eAAeA,CAACZ,QAAQ,EAAEC,OAAO,EAAE;EAC5C,IAAIK,MAAM;EACV,IAAI;IACA;IACAA,MAAM,GAAGP,oBAAoB,CAACC,QAAQ,EAAEC,OAAO,CAAC;EACpD,CAAC,CAAC,OAAOY,GAAG,EAAE;IACV,MAAM,IAAIJ,oBAAoB,CAAC,CAAC;EACpC;EACA;EACA,IAAI,CAACH,MAAM,CAACD,EAAE,KAAK,CAACV,QAAQ,CAACW,MAAM,CAACJ,KAAK,CAACA,KAAK,CAAC,IAAI,OAAOI,MAAM,CAACJ,KAAK,CAACA,KAAK,CAACY,IAAI,KAAK,QAAQ,CAAC,EAAE;IAC9F,MAAM,IAAIL,oBAAoB,CAAC,CAAC;EACpC;EACA,IAAIH,MAAM,CAACD,EAAE,IAAI,CAACV,QAAQ,CAACW,MAAM,CAACA,MAAM,CAAC,EAAE;IACvC,MAAM,IAAIG,oBAAoB,CAAC,CAAC;EACpC;EACA,OAAOH,MAAM;AACjB;AAEA,SAASX,QAAQ,IAAIoB,CAAC,EAAEH,eAAe,IAAII,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}