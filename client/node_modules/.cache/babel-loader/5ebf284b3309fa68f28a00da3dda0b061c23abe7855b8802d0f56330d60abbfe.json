{"ast":null,"code":"import { getCauseFromUnknown } from '@trpc/server/shared';\nimport { i as isObject } from './transformResult-ace864b8.mjs';\nfunction isTRPCClientError(cause) {\n  return cause instanceof TRPCClientError ||\n  /**\n  * @deprecated\n  * Delete in next major\n  */\n  cause instanceof Error && cause.name === 'TRPCClientError';\n}\nfunction isTRPCErrorResponse(obj) {\n  return isObject(obj) && isObject(obj.error) && typeof obj.error.code === 'number' && typeof obj.error.message === 'string';\n}\nclass TRPCClientError extends Error {\n  static from(_cause, opts = {}) {\n    const cause = _cause;\n    if (isTRPCClientError(cause)) {\n      if (opts.meta) {\n        // Decorate with meta error data\n        cause.meta = {\n          ...cause.meta,\n          ...opts.meta\n        };\n      }\n      return cause;\n    }\n    if (isTRPCErrorResponse(cause)) {\n      return new TRPCClientError(cause.error.message, {\n        ...opts,\n        result: cause\n      });\n    }\n    if (!(cause instanceof Error)) {\n      return new TRPCClientError('Unknown error', {\n        ...opts,\n        cause: cause\n      });\n    }\n    return new TRPCClientError(cause.message, {\n      ...opts,\n      cause: getCauseFromUnknown(cause)\n    });\n  }\n  constructor(message, opts) {\n    const cause = opts?.cause;\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore https://github.com/tc39/proposal-error-cause\n    super(message, {\n      cause\n    });\n    this.meta = opts?.meta;\n    this.cause = cause;\n    this.shape = opts?.result?.error;\n    this.data = opts?.result?.error.data;\n    this.name = 'TRPCClientError';\n    Object.setPrototypeOf(this, TRPCClientError.prototype);\n  }\n}\nexport { TRPCClientError as T };","map":{"version":3,"names":["getCauseFromUnknown","i","isObject","isTRPCClientError","cause","TRPCClientError","Error","name","isTRPCErrorResponse","obj","error","code","message","from","_cause","opts","meta","result","constructor","shape","data","Object","setPrototypeOf","prototype","T"],"sources":["/Users/danilakiva/jspool/s21_arcade_games/client/node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs"],"sourcesContent":["import { getCauseFromUnknown } from '@trpc/server/shared';\nimport { i as isObject } from './transformResult-ace864b8.mjs';\n\nfunction isTRPCClientError(cause) {\n    return cause instanceof TRPCClientError || /**\n     * @deprecated\n     * Delete in next major\n     */ cause instanceof Error && cause.name === 'TRPCClientError';\n}\nfunction isTRPCErrorResponse(obj) {\n    return isObject(obj) && isObject(obj.error) && typeof obj.error.code === 'number' && typeof obj.error.message === 'string';\n}\nclass TRPCClientError extends Error {\n    static from(_cause, opts = {}) {\n        const cause = _cause;\n        if (isTRPCClientError(cause)) {\n            if (opts.meta) {\n                // Decorate with meta error data\n                cause.meta = {\n                    ...cause.meta,\n                    ...opts.meta\n                };\n            }\n            return cause;\n        }\n        if (isTRPCErrorResponse(cause)) {\n            return new TRPCClientError(cause.error.message, {\n                ...opts,\n                result: cause\n            });\n        }\n        if (!(cause instanceof Error)) {\n            return new TRPCClientError('Unknown error', {\n                ...opts,\n                cause: cause\n            });\n        }\n        return new TRPCClientError(cause.message, {\n            ...opts,\n            cause: getCauseFromUnknown(cause)\n        });\n    }\n    constructor(message, opts){\n        const cause = opts?.cause;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore https://github.com/tc39/proposal-error-cause\n        super(message, {\n            cause\n        });\n        this.meta = opts?.meta;\n        this.cause = cause;\n        this.shape = opts?.result?.error;\n        this.data = opts?.result?.error.data;\n        this.name = 'TRPCClientError';\n        Object.setPrototypeOf(this, TRPCClientError.prototype);\n    }\n}\n\nexport { TRPCClientError as T };\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,qBAAqB;AACzD,SAASC,CAAC,IAAIC,QAAQ,QAAQ,gCAAgC;AAE9D,SAASC,iBAAiBA,CAACC,KAAK,EAAE;EAC9B,OAAOA,KAAK,YAAYC,eAAe;EAAI;AAC/C;AACA;AACA;EAAQD,KAAK,YAAYE,KAAK,IAAIF,KAAK,CAACG,IAAI,KAAK,iBAAiB;AAClE;AACA,SAASC,mBAAmBA,CAACC,GAAG,EAAE;EAC9B,OAAOP,QAAQ,CAACO,GAAG,CAAC,IAAIP,QAAQ,CAACO,GAAG,CAACC,KAAK,CAAC,IAAI,OAAOD,GAAG,CAACC,KAAK,CAACC,IAAI,KAAK,QAAQ,IAAI,OAAOF,GAAG,CAACC,KAAK,CAACE,OAAO,KAAK,QAAQ;AAC9H;AACA,MAAMP,eAAe,SAASC,KAAK,CAAC;EAChC,OAAOO,IAAIA,CAACC,MAAM,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;IAC3B,MAAMX,KAAK,GAAGU,MAAM;IACpB,IAAIX,iBAAiB,CAACC,KAAK,CAAC,EAAE;MAC1B,IAAIW,IAAI,CAACC,IAAI,EAAE;QACX;QACAZ,KAAK,CAACY,IAAI,GAAG;UACT,GAAGZ,KAAK,CAACY,IAAI;UACb,GAAGD,IAAI,CAACC;QACZ,CAAC;MACL;MACA,OAAOZ,KAAK;IAChB;IACA,IAAII,mBAAmB,CAACJ,KAAK,CAAC,EAAE;MAC5B,OAAO,IAAIC,eAAe,CAACD,KAAK,CAACM,KAAK,CAACE,OAAO,EAAE;QAC5C,GAAGG,IAAI;QACPE,MAAM,EAAEb;MACZ,CAAC,CAAC;IACN;IACA,IAAI,EAAEA,KAAK,YAAYE,KAAK,CAAC,EAAE;MAC3B,OAAO,IAAID,eAAe,CAAC,eAAe,EAAE;QACxC,GAAGU,IAAI;QACPX,KAAK,EAAEA;MACX,CAAC,CAAC;IACN;IACA,OAAO,IAAIC,eAAe,CAACD,KAAK,CAACQ,OAAO,EAAE;MACtC,GAAGG,IAAI;MACPX,KAAK,EAAEJ,mBAAmB,CAACI,KAAK;IACpC,CAAC,CAAC;EACN;EACAc,WAAWA,CAACN,OAAO,EAAEG,IAAI,EAAC;IACtB,MAAMX,KAAK,GAAGW,IAAI,EAAEX,KAAK;IACzB;IACA;IACA,KAAK,CAACQ,OAAO,EAAE;MACXR;IACJ,CAAC,CAAC;IACF,IAAI,CAACY,IAAI,GAAGD,IAAI,EAAEC,IAAI;IACtB,IAAI,CAACZ,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACe,KAAK,GAAGJ,IAAI,EAAEE,MAAM,EAAEP,KAAK;IAChC,IAAI,CAACU,IAAI,GAAGL,IAAI,EAAEE,MAAM,EAAEP,KAAK,CAACU,IAAI;IACpC,IAAI,CAACb,IAAI,GAAG,iBAAiB;IAC7Bc,MAAM,CAACC,cAAc,CAAC,IAAI,EAAEjB,eAAe,CAACkB,SAAS,CAAC;EAC1D;AACJ;AAEA,SAASlB,eAAe,IAAImB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}