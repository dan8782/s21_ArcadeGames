{"ast":null,"code":"/**\n * To allow easy interactions with groups of related queries, such as\n * invalidating all queries of a router, we use an array as the path when\n * storing in tanstack query. This function converts from the `.` separated\n * path passed around internally by both the legacy and proxy implementation.\n * https://github.com/trpc/trpc/issues/2611\n **/function getArrayQueryKey(queryKey, type) {\n  const queryKeyArrayed = Array.isArray(queryKey) ? queryKey : [queryKey];\n  const [path, input] = queryKeyArrayed;\n  const arrayPath = typeof path !== 'string' || path === '' ? [] : path.split('.');\n  // Construct a query key that is easy to destructure and flexible for\n  // partial selecting etc.\n  // https://github.com/trpc/trpc/issues/3128\n  if (!input && (!type || type === 'any'))\n    // for `utils.invalidate()` to match all queries (including vanilla react-query)\n    // we don't want nested array if path is empty, i.e. `[]` instead of `[[]]`\n    return arrayPath.length ? [arrayPath] : [];\n  return [arrayPath, {\n    ...(typeof input !== 'undefined' && {\n      input: input\n    }),\n    ...(type && type !== 'any' && {\n      type: type\n    })\n  }];\n}\nexport { getArrayQueryKey as g };","map":{"version":3,"names":["getArrayQueryKey","queryKey","type","queryKeyArrayed","Array","isArray","path","input","arrayPath","split","length","g"],"sources":["/Users/danilakiva/jspool/s21_arcade_games/client/node_modules/@trpc/react-query/dist/getArrayQueryKey-86134f8b.mjs"],"sourcesContent":["/**\n * To allow easy interactions with groups of related queries, such as\n * invalidating all queries of a router, we use an array as the path when\n * storing in tanstack query. This function converts from the `.` separated\n * path passed around internally by both the legacy and proxy implementation.\n * https://github.com/trpc/trpc/issues/2611\n **/ function getArrayQueryKey(queryKey, type) {\n    const queryKeyArrayed = Array.isArray(queryKey) ? queryKey : [\n        queryKey\n    ];\n    const [path, input] = queryKeyArrayed;\n    const arrayPath = typeof path !== 'string' || path === '' ? [] : path.split('.');\n    // Construct a query key that is easy to destructure and flexible for\n    // partial selecting etc.\n    // https://github.com/trpc/trpc/issues/3128\n    if (!input && (!type || type === 'any')) // for `utils.invalidate()` to match all queries (including vanilla react-query)\n    // we don't want nested array if path is empty, i.e. `[]` instead of `[[]]`\n    return arrayPath.length ? [\n        arrayPath\n    ] : [];\n    return [\n        arrayPath,\n        {\n            ...typeof input !== 'undefined' && {\n                input: input\n            },\n            ...type && type !== 'any' && {\n                type: type\n            }\n        }\n    ];\n}\n\nexport { getArrayQueryKey as g };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,IAAK,SAASA,gBAAgBA,CAACC,QAAQ,EAAEC,IAAI,EAAE;EAC3C,MAAMC,eAAe,GAAGC,KAAK,CAACC,OAAO,CAACJ,QAAQ,CAAC,GAAGA,QAAQ,GAAG,CACzDA,QAAQ,CACX;EACD,MAAM,CAACK,IAAI,EAAEC,KAAK,CAAC,GAAGJ,eAAe;EACrC,MAAMK,SAAS,GAAG,OAAOF,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,EAAE,GAAG,EAAE,GAAGA,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC;EAChF;EACA;EACA;EACA,IAAI,CAACF,KAAK,KAAK,CAACL,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC;IAAE;IACzC;IACA,OAAOM,SAAS,CAACE,MAAM,GAAG,CACtBF,SAAS,CACZ,GAAG,EAAE;EACN,OAAO,CACHA,SAAS,EACT;IACI,IAAG,OAAOD,KAAK,KAAK,WAAW,IAAI;MAC/BA,KAAK,EAAEA;IACX,CAAC;IACD,IAAGL,IAAI,IAAIA,IAAI,KAAK,KAAK,IAAI;MACzBA,IAAI,EAAEA;IACV,CAAC;EACL,CAAC,CACJ;AACL;AAEA,SAASF,gBAAgB,IAAIW,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}